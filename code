# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Load the dataset
data = pd.read_csv('insurance.csv')  # Assuming the dataset is named 'insurance.csv'
print(data.head())  # Show first few rows to understand the data structure

# Step 2: Basic data exploration
print("\nColumns in the dataset:", data.columns)
print("\nDataset information:")
data.info()  # Check for data types and missing values
print("\nSummary statistics:")
print(data.describe())  # Statistical summary of numerical columns

# Step 3: Data visualization
# Check the distribution of charges (target variable)
plt.figure(figsize=(8, 5))
plt.hist(data['charges'], bins=30, color='skyblue', edgecolor='black')
plt.title('Distribution of Charges')
plt.xlabel('Charges')
plt.ylabel('Frequency')
plt.show()

# Check correlation between numerical features
numerical_data = data.select_dtypes(include=['float64', 'int64'])  # Select only numerical columns
plt.figure(figsize=(10, 6))
sns.heatmap(numerical_data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()


# Boxplot of charges by smoker status
plt.figure(figsize=(8, 5))
sns.boxplot(x='smoker', y='charges', data=data, palette='Set2')
plt.title('Charges by Smoker Status')
plt.xlabel('Smoker')
plt.ylabel('Charges')
plt.show()

# Scatter plot of BMI vs. charges
plt.figure(figsize=(8, 5))
sns.scatterplot(x='bmi', y='charges', hue='smoker', data=data, palette='cool')
plt.title('BMI vs Charges')
plt.xlabel('BMI')
plt.ylabel('Charges')
plt.show()

# Step 4: Data preprocessing
# Convert categorical variables to numerical
print("\nUnique values in categorical columns:")
for column in ['sex', 'smoker', 'region']:
    print(column, data[column].unique())

# Using one-hot encoding for 'region' and label encoding for other columns
data = pd.get_dummies(data, columns=['region'], drop_first=True)
data['sex'] = data['sex'].apply(lambda x: 1 if x == 'male' else 0)
data['smoker'] = data['smoker'].apply(lambda x: 1 if x == 'yes' else 0)

print("\nData after encoding:")
print(data.head())

# Checking for outliers in BMI and charges using boxplots
plt.figure(figsize=(10, 5))
sns.boxplot(data['bmi'], color='lightblue')
plt.title('Boxplot of BMI')
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(data['charges'], color='lightgreen')
plt.title('Boxplot of Charges')
plt.show()

# Step 5: Splitting the data into train and test sets
X = data.drop('charges', axis=1)  # Features
y = data['charges']  # Target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 6: Model training
# Using Linear Regression for prediction
model = LinearRegression()
model.fit(X_train, y_train)

# Step 7: Model evaluation
# Predictions
y_pred = model.predict(X_test)

# Calculate metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("\nModel Performance:")
print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)
print("R-squared:", r2)

# Step 8: Visualizing predictions
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')
plt.title('Actual vs Predicted Charges')
plt.xlabel('Actual Charges')
plt.ylabel('Predicted Charges')
plt.show()

# Additional step: Feature importance
# In linear regression, coefficients indicate importance
coefficients = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})
coefficients = coefficients.sort_values(by='Coefficient', ascending=False)
print("\nFeature Coefficients:")
print(coefficients)

# Step 9: Further analysis
# Analyze residuals (errors)
residuals = y_test - y_pred
plt.figure(figsize=(8, 5))
sns.histplot(residuals, kde=True, color='purple')
plt.title('Distribution of Residuals')
plt.xlabel('Residuals')
plt.ylabel('Frequency')
plt.show()

# Residuals vs Predicted Charges
plt.figure(figsize=(8, 5))
plt.scatter(y_pred, residuals, color='orange', alpha=0.6)
plt.axhline(0, color='red', linestyle='--')
plt.title('Residuals vs Predicted Charges')
plt.xlabel('Predicted Charges')
plt.ylabel('Residuals')
plt.show()
